{"tag":["sketch","plugin"],"filename":"20180308185546_sketchplugin","body":"\n\n\n![full](http://qn.canisminor.cc/2018-03-08-085642.png)\n\n拿 Sketch 49 的新 [JS API](http://developer.sketchapp.com/reference/api/) 重构了一边 [SketchSelect](https://github.com/canisminor1990/sketch-select) 插件，感受：Sketch JS API 文档比之前清晰太多，还带了示例代码片段，官方终于想起有这么个文档了 🤭，但目前暴露的属性非常不全，只能说是阉割版，比如 TextLayer 的字体，ShapeLayer 的混合模式投影等，还有诸如导出，锁定，隐藏等状态都无法直接取到，还是得用其丑无比的 CocoaScript 方法。\n\n除了换 API，Webview 方面也重构了一遍，skpm 提供了使用 webpack 的[官方示例文件](https://github.com/skpm/with-webview/tree/master/template)，这边我因为使用 roadhog/dva 全家桶，所以魔改了一遍。\n\n## 安装\n\n* [skpm](https://github.com/skpm/skpm): 是 sketch 第三方开发工具集，提供调试/打包/发布等开发插件常用的功能。\n* @skpm/builder: skpm 开发包\n* [sketch-module-web-view](https://github.com/skpm/sketch-module-web-view): skpm 提供的 webview 包\n* [roadhog](https://github.com/sorrycc/roadhog) / [dva](https://github.com/dvajs/dva): 阿里 react/redux/webpack 全家桶\n* cross-env: 设置环境变量\n* concurrently: 进程多开\n\n```bash\n# 全局安装skpm包\n$ npm i -g skpm\n# 安装依赖\n$ yarn add @skpm/builder sketch-module-web-view dva\n$ yarn add roadhog cross-env concurrently --dev\n```\n\n### package 配置\n\n* package.json\n\n```json\n{\n  \"engines\": {\n    \"sketch\": \">=49.0\"\n  },\n  \"skpm\": {\n    \"name\": \"plugin-name\",\n    \"manifest\": \"src/manifest.json\",\n    \"main\": \"plugin.sketchplugin\",\n    \"assets\": [\"dist\"]\n  },\n  \"scripts\": {\n    \"start\": \"concurrently \\\"yarn start:panel\\\" \\\"yarn start:plugin\\\"\",\n    \"start:plugin\": \"cross-env NODE_ENV=development skpm-build --watch\",\n    \"start:panel\": \"roadhog dev\",\n    \"build\": \"yarn build:panel && yarn build:plugin\",\n    \"build:plugin\": \"cross-env NODE_ENV=production skpm-build\",\n    \"build:panel\": \"roadhog build\",\n    \"publish\": \"skpm publish\",\n    \"link\": \"skpm-link\"\n  }\n}\n```\n\n### skpm 配置\n\n* name：插件名称\n* manifest：插件配置文件 `manifest.json` 的位置\n* main: 打包后输出的插件文件\n* assets(数组): 资源文件，同 webpack 中的 public\n\n> ⚠️ 这里把 webview 编译后的 dist 当做资源文件，编译插件时会自动复制过去。\n\n### roadhog 配置\n\n* .webpackrc.js\n\n```js\nexport default {\n\tentry             : './panel/index.js',\n\tignoreMomentLocale: true,            : {\n\thtml              : {\n\t\t'template': './panel/index.ejs'\n\t},\n\tdefine            : {\n\t\t'$dirname': __dirname,\n\t\t'$isDev'  : process.env.NODE_ENV === 'development'\n\t},\n};\n```\n\n📘 [roadhog 官方文档](https://github.com/sorrycc/roadhog)\n\n### 文件结构：\n\n```bash\n+ public              # webview资源文件(插件使用的也一并放入)\n\t- icon/png\n\t...\n\n+ panel               # webview目录\n\t+ components\n\t+ models\n\t+ routes\n\t- index.js\n\t- index.ejs\n\t...\n+ src                 # 插件目录\n\t- manifest.json   # 插件配置文件\n\t- index.js\n\t...\n- .webpackrc.js       # roadhog配置文件，用于webview\n- .appcast.xml        # sketch插件自动更新信息\n- package.json\n\n# 编译后\n\n+ dist                # 1.webview build\n\t- index.html\n\t- index.js\n\t- index.css\n\t- icon/png\n\t...\n+ plugin.sketchplugin # 2.plugin build\n\t+ Contents\n\t\t+ Resources   # webview/资源文件\n\t\t\t- index.html\n\t\t\t- index.js\n\t\t\t- index.css\n\t\t\t- icon/png\n\t\t\t...\n\t\t+ Sketch      # 插件部分\n\t\t\t- manifest.json\n\t\t\t- index.js\n\t\t\t- ...\n```\n\n## 使用\n\n```bash\n# 开发 NODE_ENV=development\n# 同时启动并监听 plugin 和 webview\n# 如果不想每次自动执行插件, 可把--run去除\n$ yarn start\n\n# 打包 NODE_ENV=development\n$ yarn build\n```\n\n### 创建 Panel\n\n* src/index.js\n\n```js\nimport WebUI from 'sketch-module-web-view';\n\n// 判断是否是开发环境\nconst isDev = process.env.NODE_ENV === 'development';\n// 开发环境中使用浏览器调试地址\nconst Panel = isDev ? 'http://localhost:8000' : 'index.html';\n\nexport default context => {\n  // 创建Webview Panel\n  const panelUI = new WebUI(context, Panel, {\n    identifier: 'plugin.panel', // 窗口id\n    x: 0,\n    y: 0,\n    width: 340,\n    height: 624,\n    title: 'Sketch Select',\n    onlyShowCloseButton: true,\n    hideTitleBar: false,\n    shouldKeepAround: true,\n    resizable: false,\n    handlers: {\n      // plugin 和 webview 之间的通讯方法\n    },\n  });\n};\n```\n\n> 📘 [sketch-module-web-view 官方文档](https://github.com/skpm/sketch-module-web-view)\n\n### 通讯方法\n\n* src/index.js\n\n```js\npanelUI.handlers = {\n  // webview 远程调用 plugin 的方法\n  onClick(callback) {\n    console.log(callback);\n\n    // plugin 远程调用 webview 中的方法\n    const data = JSON.stringify({ ...Data });\n    panelUI.eval(`remoteFunc(${data})`);\n  },\n};\n```\n\n* panel/index.js\n\n```js\nimport pluginCall from 'sketch-module-web-view/client';\n\n// webview 远程调用 plugin 中的方法\npluginCall('onClick', callback);\n\n// plugin 远程调用 webview 的方法\nwindow.remoteFunc = data => {\n  const Data = JSON.parse(data);\n  console.log(Data);\n};\n```\n\n## 调试\n\n![nozoom](https://user-images.githubusercontent.com/3254314/32320758-1dc414d8-bfbf-11e7-9282-1d57fc53874d.png)\n\n* 安装 [**sketch-dev-tools**](https://github.com/skpm/sketch-dev-tools)\n\n![full](http://qn.canisminor.cc/2018-03-08-dev-1.png)\n\n![full](http://qn.canisminor.cc/2018-03-08-dev-2.png)\n\nsketch-dev-tool 可以在 sketch 中开启类似 Chrome 开发者工具的面板，方便调试，还可以直接查阅当前 sketch 文件的图层数据结构，总之非常方便。如果想在 sketch 中调试 webview，可以在 webview 中写一个 console 方法，把需要打印的内容传给 plugin 进行 debug。\n\n# 发布\n\n* 打开 GitHub → Setting → Developer settings\n* 在 [Personal access tokens](https://github.com/settings/tokens) 中生成一个 token\n* 需要有操作 repo 权限\n* 使用 skpm 进行登录 (只需一次)\n\n```bash\n$ skpm login <github-token>\n```\n\n* 发布版本\n\n```bash\n$ skpm publish <new-version>\n```\n\n发布命令会执行下操作:\n\n* 修改 `package.json` 版本号\n* git tag 当前版本\n* 把 `plugin.sketchplugin` 文件压缩上传至 github releases 中\n* 更新 `.appcast.xml` 文件, 通知 sketch 更新此插件\n","title":"Sketch 插件开发 - skpm & webview"}