{"tag":["前端"],"filename":"20170912110709_roadhog","body":"\n\n\n用 [roadhog](https://github.com/sorrycc/roadhog) 有一段时间了，其中才踩过大大小小许多坑，又因为其版本更新说明基本都碎片式地放在 releases 里或者偶尔出现在 issues 里 😐 ，所以决定开个坑记录一下。\n\n## Sass\n\n从 `1.0.0` 开始完整地支持了 sass ，需自行引入 sass-loader 和 node-sass 依赖，文档没有写的地方是 sass 的 webpack 配置可以直接写在 roadhogrc 里，sourceMap 和 includePaths 均可用：\n\n```js\nexport default {\n  sass: {\n    sourceMap: process.env.NODE_ENV === 'development',\n    includePaths: [\n      'node_modules',\n      'src/style'\n    ],\n  },\n  ...\n}\n```\n\n> 设置 `includePaths` 后使用 `@import` 时无需处理路径, 设置中路径下的文件可以直接引入，需要注意的是，加入当前目录中有同名的文件，那当前目录中的优先级将会比 includePaths 中的高。\n\n## Vendor\n\nVendor 可以解决 webpack 打包体积过大的问题，提取不变的第三方库单独打包引入，避免每次打包重复下载。要开启此功能首先创建 `src/vendor.js` 文件：\n\n```js\nimport 'react';\nimport 'react-dom';\nimport 'dva';\nimport 'dva-loading';\nimport 'history';\n\n// 如果要动态引入antd这么写\n\nimport antd from 'antd';\nconst { Icon, Layout, Button, Popover, Collapse, BackTop, message } = antd;\n```\n\n然后在 .roadhogrc.js 里做如下配置\n\n```js\nexport default {\n  entry: {\n    'index' : './src/index.js',\n    'common': './src/vendor.js'\n  },\n  multipage: true,\n  ...\n}\n```\n\n## Hash\n\n要开启 hash 必须开启 ejs (HtmlWebpackPlugin) 功能，存在 `src/index.ejs` 即开启此功能，然后在 .roadhogrc.js 中加入 `hash: true` 即可，需要注意的是开启 ejs 后：\n\n* 原有的 index.html 将失效，均可删除，可直接复制到 index.ejs 中。\n* 在 index.js 中无需引入 html.ejs 文件\n* 无需手动引入`index.js` `index.scss` `common.scss` 等文件\n\n## Roadhog.dll\n\n开启 dll 能很大程度提高启动和编译项目的时间，约 3 倍左右，要开启 dll 支持需要做如下配置：\n\n**.roadhogrc.js **：\n\n```js\nexport default {\n  dllPlugin: {\n    exclude: [\n      'babel-runtime'\n    ],\n    include: [\n      'dva/router',\n      'dva/saga',\n      'dva/fetch'\n    ],\n  },\n  ...\n}\n```\n\n**src/index.ejs**\n\n```ejs\n<body>\n  <div id=\"root\"></div>\n  <% if (process.env.NODE_ENV === 'development') { %>\n  <script type=\"text/javascript\" src=\"/roadhog.dll.js\"></script>\n  <% } %>\n</body>\n```\n\n**package.json**\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"roadhog build\",\n    \"build:dll\": \"roadhog buildDll\"\n  }\n}\n```\n\n开启 dll 的功能话，需要保证 dependencies 里的包和 vendor 里的一致，其他放在 dev 里，或者用 exclude 进行排除，否则将出现诸如找不到 fs 之类报错，每次增加新包都需要重新执行 `yarn build:dll`。\n\n## sw-precache\n\n开启渐进式缓存提高网站加载速度，首选添加 `sw-precache` 包，在 package.json 中修改：\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"roadhog build ; sw-precache --config=sw-precache-config.js\",\n    \"build:dll\": \"roadhog buildDll\"\n  }\n}\n```\n\n在根目录创建 sw-precache-config.js 文件：\n\n```js\nmodule.exports = {\n  stripPrefix: 'dist/',\n  staticFileGlobs: [\n    'dist/img/**/*',\n    'dist/favicon/*',\n    'dist/font/*',\n    'dist/*common*',\n  ],\n  dontCacheBustUrlsMatching: /./,\n  swFilePath: 'dist/sw-precache.js',\n};\n```\n\n修改 html.ejs：\n\n```ejs\n<head>\n  ...\n  <% if (process.env.NODE_ENV !== 'development') { %>\n  <!--progressive-web-app-->\n  <script>\n    if ('serviceWorker' in navigator) navigator.serviceWorker.register('/precache.js');\n  </script>\n  <% } %>\n</head>\n```\n","title":"Roadhog 踩坑记录"}