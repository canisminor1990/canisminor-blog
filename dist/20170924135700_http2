{"tag":["nginx","http"],"filename":"20170924135700_http2","body":"\n\n\n\n![](http://qn.canisminor.cc/2017-09-24-031221.jpg)\n\n听说http/2已经蛮久了，刚好被Chrome Audlts建议升级了，查看一下升级过程也不是很复杂，于是就对博客网站尝试了升级。\n\n> http/2最大的特点是使用多路复用，对同一个域的服务器只建立一次TCP连接，加载多个资源，使用二进制帧传输，同时会对http头部进行压缩。使用http2会比http/1.1更加地高效。\n\n## 升级openssl\n\n最低要求版本:\n\n- nginx@1.10.0\n- openssl@1.0.2\n\n```sh\n$ nginx -V\n> nginx version: nginx/1.10.2\n\n$ openssl version -a \n> OpenSSL 1.0.1e-fips 11 Feb 2013\n```\n\n查看了服务器中的版本，于是乎只需要升级openssl就可以了:\n\n```sh\n$ cd /usr/local/src/\n$ wget https://www.openssl.org/source/openssl-1.1.0f.tar.gz \n$ tar xvf openssl-1.1.0f.tar.gz\n$ cd openssl-1.1.0c.tar.gz\n$ ./config shared zlib-dynamic\n$ make; make install\n```\n\n移除老版本的openssl，创建新的软连接\n\n```sh\n$ mv /usr/bin/openssl /usr/bin/openssl.old\n$ mv /usr/include/openssl /usr/include/openssl.old\n$ mv /usr/local/lib64/libcrypto.so /usr/local/lib64/libcrypto.so.old\n$ mv /usr/local/lib64/libssl.so /usr/local/lib64/libssl.so.old\n\n$ ln -s /usr/local/openssl/bin/openssl /usr/bin/openssl\n$ ln -s /usr/local/openssl/include/openssl /usr/include/openssl\n$ ln -s /usr/local/lib64/libcrypto.so.1.1 /usr/local/lib64/libcrypto.so\n$ ln -s /usr/local/lib64/libssl.so.1.1 /usr/local/lib64/libssl.so\n\n$ echo \"/usr/local/openssl/lib\" >>/etc/ld.so.conf \n$ echo \"/usr/local/lib64\" > /etc/ld.so.conf.d/openssl.conf\n\n$ ldconfig -v\n\n$ openssl version\n\n> OpenSSL 1.1.0f  25 May 2017\n```\n\n## 升级nginx\n\n但貌似只是发现只是升级了系统的openssl是没有用的，是因为nginx在编译的时候指定的openssl是1.0.1的：\n\n```sh\nnginx version: nginx/1.10.2\nbuilt by gcc 4.8.5 20150623 (Red Hat 4.8.5-4) (GCC) \nbuilt with OpenSSL 1.0.1e-fips 11 Feb 2013\n```\n\n于是还是得升级nginx:\n\n```sh\n$ cd /usr/local/src/\n$ wget http://nginx.org/download/nginx-1.13.5.tar.gz\n$ tar -xvzf nginx-1.13.5.tar.gz\n$ nginx -V\n\n#记录安装参数,并加上 --with-openssl=/usr/local/src/openssl-1.1.0f\n\n$ service nginx stop\n$ make; make install\n$ service nginx restart\n\n#升级成功\n$ nginx -V\n> nginx version: nginx/1.13.5\n> built by gcc 4.8.5 20150623 (Red Hat 4.8.5-16) (GCC) \n> built with OpenSSL 1.1.0f  25 May 2017\n```\n\n## http2 配置\n\n然后添加nginx配置：\n\n```white\nlisten 443 ssl;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n```\n\n现在在后面加上http2, TLSv1.3：\n\n```white\nlisten 443 ssl http2;\nssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;\n```\n\n## 成果\n\n重启nginx，再跑一边Audlts：铛铛铛 100分\n\n![](http://qn.canisminor.cc/2017-09-24-053335.jpg)\n\n### HTTP/2的优势\n\n所以升级到http/2的好处是什么，参考了一篇[掘金的文章](https://juejin.im/post/59c63adf6fb9a00a4c271484)\n\n多路复用的意义在于可以用同一个连接传输多个资源，进而使得以前在http 1.1所做一些优化就没有必要了，如：\n\n- 使用sprits技术，把多张小图合成一张大图，减少请求数\n\n- 合并js和css，减少请求数\n\n  ​\n\n因为在http 1.1时代，由于需要建立多个TCP连接，服务器需要更多的线程来处理请求，同样地，浏览器也需要，所以浏览器会限制同一个域的同时请求数，Chrome是限制6个，总连接数是17个，其它浏览器的个数有所浮动，但差不多，http 1.1会让资源排队加载，如下图所示：\n\n![](http://qn.canisminor.cc/2017-09-24-054230.jpg)\n\n但当开启了http/2之后，个数几乎没有限制了，如下图所示：\n\n![](http://qn.canisminor.cc/2017-09-24-054246.jpg)\n\n你会发现这些资源都是同时加载的，后面加载的资源不需要进行排队。也就是说理论上带宽有多大，就能传多快。实际的效果在笔者的博客网站上，用了一个页面重复了5次，比较平均值，load时间只快了4%，在我这个例子并不是很明显，但并不能代表HTTP 2没什么用，如果nginx和业务服务的连接也是http/2应该会更好。后面的内容对于一个设计师有点太深奥（枯燥😴）了就没有继续啃读，有兴趣的可以通过扩展阅读补完\n\n**扩展：**\n\n- [Introduction to HTTP/2 - 谷歌开发者文档](https://link.juejin.im/?target=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ffundamentals%2Fperformance%2Fhttp2%2F)\n- [Why Everyone Should Be Moving To HTTP/2](https://link.juejin.im/?target=http%3A%2F%2Fsearchengineland.com%2Feveryone-moving-http2-236716)\n- [为什么要把网站升级到HTTPS](https://link.juejin.im/?target=https%3A%2F%2Ffed.renren.com%2F2017%2F09%2F03%2Fupgrade-to-https%2F)\n\n## 后记: 使用rel=noopener\n\n其实运行Audlts的时候还推荐了在a标签使用`target=\"_blank` 时加上 `rel=\"noopener\"` \n\n```html\n<a target=\"_blank\" href=\"http://baidu.com/\">点击</a>\n// ->\n<a target=\"_blank\" rel=\"noopener\" href=\"http://baidu.com/\">点击</a>\n```\n\n在新打开的标签页通过`window.oponer` ，可以获得当前页面的`window` 。这样的话被打开的页面将获得当前页面的部分控制权，即使新打开的页面是跨域的也照样可以（例如`location` 就不存在跨域问题）。在chrome 49+，Opera 36+，打开添加了rel=noopener的链接，`window.opener` 会为null。\n\n**扩展：**\n\n- [About rel=noopener](https://mathiasbynens.github.io/rel-noopener/)","title":"升级 http/2 记录"}